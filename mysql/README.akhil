#hello this if for installtion of mysql in python and pratical

cat README.akhil 
 2004  sudo apt update
 2005  sudo apt install mysql-server
 2006  mysql --version
 2007  sudo mysql_secure_installation 
 2008  sudo systemctl status mysql
 2009  sudo systemctl start mysql
 2010  sudo systemctl status mysql
 2011  sudo mysql -u root 
 or
  sudo mysql -u root 
   
#####add new database

wget https://downloads.mysql.com/docs/sakila-db.tar.gz
tar -xvzf sakila-db.tar.gz
cd sakila-db

# Load schema
mysql -u root -p < sakila-schema.sql
# Load data
mysql -u root -p < sakila-data.sql
###################################


SHOW DATABASES;
USE sakila;
SHOW TABLES;




-- ===============================
-- 20 Very Basic MySQL Commands
-- ===============================

-- 1. Show all databases
SHOW DATABASES;

-- 2. Switch to sakila database
USE sakila;

-- 3. Show all tables in the database
SHOW TABLES;

-- 4. See the structure of a table
DESCRIBE actor;

-- 5. Show first 10 rows of a table
SELECT * FROM actor LIMIT 10;

-- 6. Select specific columns
SELECT first_name, last_name FROM actor;

-- 7. Filter rows with WHERE
SELECT * FROM actor WHERE last_name = 'SMITH';

-- 8. Sort results
SELECT * FROM actor ORDER BY first_name ASC;

-- 9. Count rows
SELECT COUNT(*) FROM actor;

-- 10. Rename columns in output (alias)
SELECT first_name AS fname, last_name AS lname FROM actor;

-- 11. Find unique values (DISTINCT)
SELECT DISTINCT last_name FROM actor;

-- 12. Use conditions with AND/OR
SELECT * FROM actor WHERE first_name = 'NICK' OR last_name = 'WAHLBERG';

-- 13. Pattern matching with LIKE
SELECT * FROM actor WHERE first_name LIKE 'A%';

-- 14. Range filtering with BETWEEN
SELECT * FROM film WHERE rental_rate BETWEEN 2.99 AND 4.99;

-- 15. Check values with IN
SELECT * FROM film WHERE rating IN ('G', 'PG');

-- 16. Find the maximum/minimum
SELECT MAX(rental_rate) AS highest_rate, MIN(rental_rate) AS lowest_rate FROM film;

-- 17. Calculate average
SELECT AVG(rental_duration) AS avg_duration FROM film;

-- 18. Group by with COUNT
SELECT rating, COUNT(*) AS num_films FROM film GROUP BY rating;

-- 19. Having clause (filter groups)
SELECT rating, COUNT(*) AS num_films 
FROM film 
GROUP BY rating 
HAVING COUNT(*) > 200;

-- 20. Join two tables
SELECT f.title, c.name AS category
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id;



####################################
-- ===============================
-- MySQL Practical: Create College Database and Enter Students Manually
-- ===============================




-- 1. Create a new database
CREATE DATABASE college;

-- 2. Switch to that database
USE college;

-- 3. Create a table for students
CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    age INT,
    department VARCHAR(50)
);

-- 4. Insert data manually (one row at a time)
INSERT INTO students (first_name, last_name, age, department)
VALUES ('Rahul', 'Sharma', 20, 'Computer Science');

INSERT INTO students (first_name, last_name, age, department)
VALUES ('Priya', 'Verma', 22, 'Mathematics');

INSERT INTO students (first_name, last_name, age, department)
VALUES ('Amit', 'Kumar', 21, 'Physics');

-- 5. Insert multiple rows at once
INSERT INTO students (first_name, last_name, age, department) VALUES
('Sneha', 'Singh', 23, 'Chemistry'),
('Vikram', 'Yadav', 19, 'Biology'),
('Anjali', 'Patel', 20, 'English Literature');

-- 6. View the table
SELECT * FROM students;

-- 7. Update a student record
UPDATE students SET age = 24 WHERE student_id = 2;

-- 8. Delete a student record
DELETE FROM students WHERE student_id = 3;

-- 9. Add a new column
ALTER TABLE students ADD email VARCHAR(100);

-- 10. Rename a column
ALTER TABLE students CHANGE department dept_name VARCHAR(50);

-- 11. Drop (remove) a column
ALTER TABLE students DROP COLUMN email;

-- 12. Insert a duplicate and then prevent duplicates using UNIQUE
INSERT INTO students (first_name, last_name, age, dept_name)
VALUES ('Rahul', 'Sharma', 20, 'Computer Science');

ALTER TABLE students ADD CONSTRAINT unique_name UNIQUE (first_name, last_name);

-- 13. Remove duplicate rows (keep only unique)
DELETE s1 FROM students s1
JOIN students s2 
ON s1.first_name = s2.first_name 
AND s1.last_name = s2.last_name 
AND s1.student_id > s2.student_id;

-- 14. Change the datatype of a column
ALTER TABLE students MODIFY age SMALLINT;

-- 15. Add a NOT NULL constraint
ALTER TABLE students MODIFY first_name VARCHAR(50) NOT NULL;

-- 16. Add a default value to a column
ALTER TABLE students ALTER dept_name SET DEFAULT 'Undeclared';

-- 17. Truncate the table (remove all rows but keep structure)
TRUNCATE TABLE students;

-- 18. Drop the entire table
DROP TABLE students;

-- 19. Drop the whole database
DROP DATABASE college;














 

 
 

Create your first database

CREATE DATABASE mydb;

Create a user and give permissions (optional but recommended)

CREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypassword';
GRANT ALL PRIVILEGES ON mydb.* TO 'myuser'@'localhost';
FLUSH PRIVILEGES;


EXIT;


-- List all tables in the current database
SHOW TABLES;

-- See the structure of a specific table
DESCRIBE people;

-- View first 10 rows of data
SELECT * FROM people LIMIT 10;

-- Insert new data into the table
INSERT INTO people (id, name, age) VALUES (4, 'Charlie', 28);

-- Update existing data
UPDATE people
SET age = 29
WHERE id = 4;

-- Delete a row from the table
DELETE FROM people
WHERE id = 4;

-- Create a new table example
CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50),
    age INT,
    course VARCHAR(50)
);

-- Show tables again to confirm new table
SHOW TABLES;





###########################################################################
now connect to 
mysql -u myuser -p mydb


-- ===============================
-- Method 1: Using LOAD DATA INFILE
-- ===============================

-- First, create the table
CREATE TABLE people (
    id INT,
    name VARCHAR(50),
    age INT
);

-- Bulk load data from text file (data.txt)
-- Example content of data.txt:
-- 1,John,25
-- 2,Alice,30
-- 3,Bob,22

LOAD DATA LOCAL INFILE '/path/to/data.txt'
INTO TABLE people
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

-- ===============================
-- Method 2: Using INSERT statements
-- ===============================

-- Insert data manually
INSERT INTO people (id, name, age) VALUES (1, 'John', 25);
INSERT INTO people (id, name, age) VALUES (2, 'Alice', 30);
INSERT INTO people (id, name, age) VALUES (3, 'Bob', 22);


########################################
%%%%%%%%%%create a data.txt
1,John,25
2,Alice,30
3,Bob,22

%%%%%Run in MySQL
mysql --local-infile=1 -u myuser -p mydb < insert_data.sql

